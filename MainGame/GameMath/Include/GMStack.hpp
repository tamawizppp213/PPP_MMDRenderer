//////////////////////////////////////////////////////////////////////////////////
///             @file   GMStack.hpp
///             @brief  GM Simple Stack
///             @author Toide Yutaro
///             @date   2020_12_13
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef GM_STACK_HPP
#define GM_STACK_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include <vector>

//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                         
//////////////////////////////////////////////////////////////////////////////////
namespace gm
{
	/****************************************************************************
	*				  			Stack
	*************************************************************************//**
	*  @class     Stack
	*  @brief     Simple Stack
	*****************************************************************************/
	template<typename T>
	class Stack
	{
	public:
		/****************************************************************************
		**                Public Function
		*****************************************************************************/
		bool IsEmpty()
		{
			return _stack.empty();
		}

		void Push(const T& data)
		{
			_stack.push_back(data);
		}

		T Pop()
		{
			T temp = _stack[_stack.size() - 1];
			_stack.pop_back();
			_stack.shrink_to_fit();
			return temp;
		}

		int StackCount()
		{
			return _stack.size();
		}

		void Clear()
		{
			_stack.clear();
		}
		/****************************************************************************
		**                Public Member Variables
		*****************************************************************************/

		/****************************************************************************
		**                Constructor and Destructor
		*****************************************************************************/


	private:
		/****************************************************************************
		**                Private Function
		*****************************************************************************/
		
		/****************************************************************************
		**                Private Member Variables
		*****************************************************************************/
		std::vector<T> _stack;
	};
}
#endif