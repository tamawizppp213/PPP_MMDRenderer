//////////////////////////////////////////////////////////////////////////////////
///             @file   DirectX12Texture.hpp
///             @brief  .tga, .dds, ,png, .jpg, .bmp, .hdr
///             @author Toide Yutaro
///             @date   2020_12_06
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef DIRECTX12_TEXTURE_HPP
#define DIRECTX12_TEXTURE_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include "DirectX12/Include/DirectX12Core.hpp"
#include <DirectXTex/DirectXTex.h>
#include <string>
#include <unordered_map>
//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////
std::unordered_map<std::wstring, ResourceComPtr> g_textureTable;

/****************************************************************************
*				  			    Texture
*************************************************************************//**
*  @class     Texture
*  @brief     Texture Manager .tga, .dds, ,png, .jpg, .bmp, .hdr
*****************************************************************************/
class Texture
{
	/****************************************************************************
	**                Public Function
	*****************************************************************************/
	void LoadTexture(DirectX12& directX12, const std::wstring& filePath, ResourceComPtr& buffer);
	/****************************************************************************
	**                Public Member Variables
	*****************************************************************************/

	/****************************************************************************
	**                Constructor and Destructor
	*****************************************************************************/
	Texture() {};
	~Texture() {};
private:
	/****************************************************************************
	**                Private Function
	*****************************************************************************/
	void CreateTextureFromImageData(Device* device, const DirectX::Image* image, ResourceComPtr& buffer, bool isDiscreteGPU);
	/****************************************************************************
	**                Private Member Variables
	*****************************************************************************/

};

#endif