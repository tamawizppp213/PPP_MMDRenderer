//////////////////////////////////////////////////////////////////////////////////
///             @file   DirectX12ModelFile.hpp
///             @brief  3D Model File Abstract Class (.obj, .fbx, .pmd...)) 
///             @author Toide Yutaro
///             @date   2020_12_
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef DIRECTX12_MODEL_FILE_HPP
#define DIRECTX12_MODEL_FILE_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <Windows.h>
//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

/****************************************************************************
*				  			ModelData 
*************************************************************************//**
*  @class     ModelData
*  @brief     ModelData Abstract Class
*****************************************************************************/
class ModelData
{
public:
	/****************************************************************************
	**                Public Function
	*****************************************************************************/
	virtual void Load3DModel(const std::wstring& filePath) = 0;
	
#pragma region Property
	virtual UINT32 GetVertexCount()   = 0;
	virtual UINT32 GetIndexCount()    = 0;
	virtual UINT32 GetMaterialCount() = 0;
#pragma endregion Property
	/****************************************************************************
	**                Public Member Variables
	*****************************************************************************/

	/****************************************************************************
	**                Constructor and Destructor
	*****************************************************************************/
protected:
	/****************************************************************************
	**                ProtectedFunction
	*****************************************************************************/

	/****************************************************************************
	**                Protected Member Variables
	*****************************************************************************/
	std::string _modelName;
	UINT32      _vertexCount;
	UINT32      _indexCount;
	UINT32      _materialCount;
private:
	/****************************************************************************
	**                Private Function
	*****************************************************************************/

	/****************************************************************************
	**                Private Member Variables
	*****************************************************************************/
};
#endif
