//////////////////////////////////////////////////////////////////////////////////
///             @file   Font.hpp
///             @brief  Font
///             @author Toide Yutaro
///             @date   2021_02_10
//////////////////////////////////////////////////////////////////////////////////
#pragma once
#ifndef TEXT_RENDERER_HPP
#define TEXT_RENDERER_HPP

//////////////////////////////////////////////////////////////////////////////////
//                             Include
//////////////////////////////////////////////////////////////////////////////////
#include "SpriteRenderer.hpp"
#include "Font.hpp"
#include "Text.hpp"
#include <unordered_map>
#include <string>
#include <Windows.h>

//////////////////////////////////////////////////////////////////////////////////
//                              Define
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
//                            Class
//////////////////////////////////////////////////////////////////////////////////
/****************************************************************************
*				  			TextRenderer
*************************************************************************//**
*  @class     Text Renderer
*  @brief     text rendering
*****************************************************************************/
class TextRenderer : public SpriteRenderer
{
public:
	/****************************************************************************
	**                Public Function
	*****************************************************************************/
	bool Initialize();
	bool DrawString(FontType fontType, const TextString& text,   const DirectX::XMFLOAT4& color, const DirectX::XMMATRIX& matrix);
	bool DrawNumber(FontType fontType, const TextNumber& number, const DirectX::XMFLOAT4& color, const DirectX::XMMATRIX& matrix);
	bool DrawEnd();
	bool Finalize();

	/****************************************************************************
	**                Public Member Variables
	*****************************************************************************/

	/****************************************************************************
	**                Constructor and Destructor
	*****************************************************************************/
private:
	/****************************************************************************
	**                Private Function
	*****************************************************************************/

	/****************************************************************************
	**                Private Member Variables
	*****************************************************************************/
	static std::unordered_map<int, Texture> _textMap;
};
#endif